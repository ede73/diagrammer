/*https://github.com/zaach/jison/wiki/Deviations-From-Flex-Bison*/
%start S
%ebnf
%{
	// trace? DEBUG=1 make ... (make sure jison -t is used)
	const Jison = {
		print(msg) {
			console.log(`TRACE: ${msg}`);
		}
	}
%}
%%
S
	: graphContent			-> $graphContent
	| S graphContent		-> $S + $graphContent
	| S EOF
		{
			/*	- caller can ALWAYS specify the generator
				- caller can ALWAYS specify the visualizer
				- only graphviz has multiple visualizer (currently it 
				  only draws digraphs, but those can be visualized with dot, neato.circo etc)
				- generator/visualizer(since different grammars)
					- mscgen=mscgen
					- seqdiag=seqdiag
					- blockdiag=blockdiag
					- nwdiag=nwdiag
					- ast=ast
					- plantuml_sequence=plantuml_sequence

					PlantUML MIGHT BE plantuml/[sequence|activty etc.]
				- If visualizer given, RECORD it, do not use...
				- Caller can then (willingly) check for LANGUAGE given visualizer(or generator) and
				  override those or obey to those. Those would be suggested tools to use...
			*/

			// Generator can be defined by the caller(user) or suggested by the graph
			const graphcanvas = yy.GRAPHCANVAS;
			const parsedGenerator = graphcanvas.getGenerator();
			const parsedVisualizer = graphcanvas.getVisualizer();
			// TODO: Simplify, pass back to the caller, let it do decision what to use
			// THIS special feature is only used with web UI, so makes more sense than complicated BL here..
			if (yy.parsedGeneratorAndVisualizer) {
			  yy.parsedGeneratorAndVisualizer(parsedGenerator, parsedVisualizer, yy.PREFER_GENERATOR_VISUALIZER_FROM_DIAGRAMMER);
			}

			if (yy.PREFER_GENERATOR_VISUALIZER_FROM_DIAGRAMMER) {
			  debug('Called wants to prefer generator/parser from the script');
			  if (parsedGenerator) {
			    const foundGeneratorFunc = generators.get(parsedGenerator);
			    if (foundGeneratorFunc) {
			      // We're asked to prefer script generator and such generator exists
			      yy.USE_GENERATOR = parsedGenerator;
			      debug(`Using found and recognized parsed generator (${parsedGenerator})`);
			    }
			  }
			  if (parsedVisualizer) {
			    const useVisualizerFunc = visualizations.get(parsedVisualizer);
			    if (useVisualizerFunc) {
			      // Found visualizer and recognized it
			      // TODO: NO support for this yet...
			    }
			  }
			}

			if (yy.USE_GENERATOR) {
			  graphcanvas.setGenerator(yy.USE_GENERATOR);
			}

			// Visualizer can be defined by the caller(user) or suggested by the graph
			if (yy.USE_VISUALIZER) {
			  graphcanvas.setVisualizer(yy.USE_VISUALIZER);
			} else if (!graphcanvas.getVisualizer()) {
			  const visualizer = graphcanvas.getVisualizer();
			  if (visualizer === "digraph") {
			    graphcanvas.setVisualizer("dot");
			  } else if (graphcanvas.getGenerator()){
			    graphcanvas.setVisualizer(graphcanvas.getGenerator());
			  }
			}
			graphcanvas.result = yy.result;
			
			// Locate the generator, else just use digraph
			const usegen = generators.get(graphcanvas.getGenerator());
			if (usegen) {
				usegen(graphcanvas);
			} else {
				console.log("Available generators:");
				for (const key of generators.keys()) {
  					console.log(key);
				}
				throw new Error(`Unknown generator ${graphcanvas.getGenerator()}`);
			}
			return $1;
		}
	;

/* Read a color #xxxxxx or a variable $(xxx) or $(xxx:yyy) that MUST produce #xxxxxx*/
colorOrVariable
	: COLOR		{
		parser.trace('COLOR :'+$COLOR)
		$$=$COLOR
	}
	| VARIABLE	{
		parser.trace('VARIABLE1 :'+$VARIABLE)
		/*one can use named $VARIABLE or positional $1 args, like former, but latter seem more ...readable*/
		$$=_processVariable(yy.GRAPHCANVAS, $VARIABLE)
	}
	;

/* Read a shape  or a variable $(xxx) or $(xxx:yyy) that MUST produce a shape */
shapeOrVariable
	: VARIABLE {
			parser.trace('VARIABLE2 :'+$1)
			$$=_processVariable(yy.GRAPHCANVAS, $1).trim().toLowerCase();
			if (["actor", "beginpoint", "right", "circle", "cloud", "condition", "database", "default", "diamond", "dots", "doublecircle",
				 "ellipse", "endpoint", "input", "loopin", "loopout", "mail", "document", "display", "note", "record", "roundedbox",
				 "square", "left", "loop", "subroutine", "preparation", "rect", "folder"].indexOf($$)==-1){
				throw new Error("Must use declared shape");
			}
	}
	| SHAPES {
		parser.trace('SHAPES :'+$SHAPES)
		$$=$SHAPES
	}
	;

/* read vertice's attributes basically like: [STYLES] [SHAPES] NAME [IMAGE|COLOR]*/
readVertexAttrs
    /*  1      2       3       4        5            6          7*/
	: STYLES? SHAPES? NAME COMPASS? colorOrVariable? IMAGE? -> _getVertexOrGroup(yy.GRAPHCANVAS, $NAME, $1).setColor($5);if (($$ instanceof GraphVertex) || ($$ instanceof GraphReference)) setAttr($$.setShape($2).setImage($6), 'compass', $4)
	;

/*
NOT BEST...return GraphVertex or Group, but some commands allow only GraphVertex and some just Group...
But it gets thing done..for now!
TODO: Fix it

This means _getVertexOrGroup MUST be able to return a Group as well! If name matches!!

left recursive
  X=[STYLES] [SHAPES] NAME [IMAGE|COLOR]
  X ([ LISTSEP X]*)
See Cris Dodds good explanation of right recursion 
http://stackoverflow.com/questions/12715961/grammar-spec-resolving-shift-reduce-conflicts
And even better thorough explanation from IBM
http://publib.boulder.ibm.com/infocenter/zvm/v5r4/index.jsp?topic=/com.ibm.zvm.v54.dmsp4/hcsp4b10120.htm
vertexGroupListOrAttrs cumulates an array of vertices, RHS is the latest GraphVertex
*/
vertexGroupListOrAttrs
	: OPAREN {
		parser.trace('OPAREN ');
		$$=_enterNewGraphInner(yy.GRAPHCANVAS)
	}
	| vertexGroupListOrAttrs LISTSEP INLINE_STRING? readVertexAttrs {
		parser.trace('vertexGroupListOrAttrs :'+$vertexGroupListOrAttrs+","+$readVertexAttrs+","+$3);
		$$=_getList(yy.GRAPHCANVAS, $vertexGroupListOrAttrs, $readVertexAttrs, $3)
	}
	| readVertexAttrs {
		parser.trace('readVertexAttrs :'+$readVertexAttrs)
		$$=$readVertexAttrs
	}
	| CPAREN {
		parser.trace('CPAREN ');
		$$=_exitCurrentGraphInner(yy.GRAPHCANVAS)
	}
	;
	/* TOOD: Could concatenate $4, $6 or if $4 defined AND $6, $6 could be appended as ::, unless already(note)*/
readEvents
        /*   1         2       3       4        5               6              7                   8*/
	: readEvents COMPASS? EVENT COMPASS? colorOrVariable? INLINE_STRING? vertexGroupListOrAttrs LABEL? {
		parser.trace('readEvents1 : edgetype='+$EVENT+", lhs="+$readEvents+",rhs="+$vertexGroupListOrAttrs+",inlineedge="+$6+",commonedge="+$8+",edgecolor="+$5+",lcompass="+$2+",rcompass="+$4);
		$$=_getEdge(yy.GRAPHCANVAS, $EVENT, $readEvents, $vertexGroupListOrAttrs, $6, $8?$8.substring(1):$8, $5, $2, $4).right;
	}
	| readEvents LABEL {
		parser.trace('readEvents2 LABEL:'+$LABEL)
		$$=$$.setLabel($LABEL.substring(1))//abc
	}
	| vertexGroupListOrAttrs
	;

graphContent
	: VARIABLE {
		parser.trace('VARIABLE3 :'+$1);
		$$=_processVariable(yy.GRAPHCANVAS, $1)
	}
	| SHAPE shapeOrVariable {
		parser.trace('SHAPE shapeOrVariable :'+$2);
		if ($2=="default") $2=undefined;
		$$=yy.GRAPHCANVAS.setCurrentShape($2);
	}
	| EQUAL vertexGroupListOrAttrs {
		parser.trace('EQUAL vertexGroupListOrAttrs :'+$2);
		$$=yy.GRAPHCANVAS.parsingContext._getCurrentContainer().setEqual($2 instanceof GraphVertex?new Array($2):$2);
	}
	| SHAPE NAME {throw new Error("Expecting one of the shapes, got ("+$2+")");}
	| LANDSCAPE		    {
		parser.trace('LANDSCAPE');
		$$=yy.GRAPHCANVAS.setDirection("landscape")
	}
	| GENERATOR NAME	{
		parser.trace('GENERATOR :'+$NAME);
		$$=yy.GRAPHCANVAS.setGenerator($NAME)
	}
	| VISUALIZER NAME	{
		parser.trace('VISUALIZER :'+$NAME);
		$$=yy.GRAPHCANVAS.setVisualizer($NAME)
	}
	| PORTRAIT			{
		parser.trace('PORTRAIT');
		$$=yy.GRAPHCANVAS.setDirection("portrait")
	}
	| COMMENT			{
		parser.trace('COMMENT :'+$COMMENT);
		"/*"+$COMMENT.substring(2)+"*/\n"
	}
	| VERTEX_COLOR colorOrVariable	   {
		parser.trace('VERTEX_COLOR :'+$2);
		$$=yy.GRAPHCANVAS.parsingContext._getCurrentContainer().setDefault('vertexcolor'    ,$2=="default"?undefined:$2)
	}
	| VERTEXTEXT_COLOR colorOrVariable {
		parser.trace('VERTEXTEXT_COLOR :'+$2);
		$$=yy.GRAPHCANVAS.parsingContext._getCurrentContainer().setDefault('vertextextcolor',$2=="default"?undefined:$2)
	}
	| EDGE_COLOR colorOrVariable	   {
		parser.trace('EDGE_COLOR :'+$2);
		$$=yy.GRAPHCANVAS.parsingContext._getCurrentContainer().setDefault('edgecolor'      ,$2=="default"?undefined:$2)
	}
	| EDGETEXT_COLOR colorOrVariable   {
		parser.trace('EDGETEXT_COLOR :'+$2);
		$$=yy.GRAPHCANVAS.parsingContext._getCurrentContainer().setDefault('edgetextcolor'  ,$2=="default"?undefined:$2)
	}
	| GROUP_COLOR colorOrVariable	   {
		parser.trace('GROUP_COLOR :'+$2);
		$$=yy.GRAPHCANVAS.parsingContext._getCurrentContainer().setDefault('groupcolor'     ,$2=="default"?undefined:$2)
	}
	| DO	{
		parser.trace('DO :'+$DO);
		// TODO: Add proper GraphWhile(or GraphDo)
		$$=_getGroupLoopOrMakeNew(yy.GRAPHCANVAS, 'do', $DO)
	}
	| UNTIL {
		parser.trace('UNTIL :'+$UNTIL);
		// TODO: hmm..how should we highlight the until condition here?
		yy.GRAPHCANVAS.parsingContext._getCurrentContainer().setLabel($UNTIL)
		$$=yy.GRAPHCANVAS.parsingContext._exitContainer()
	}
	| WHILE	{
		parser.trace('WHILE :'+$WHILE);
		// TODO: Add proper GraphWhile
		$$=_getGroupLoopOrMakeNew(yy.GRAPHCANVAS, 'while', $WHILE)
	}
	| ENDWHILE {
		parser.trace('ENDWHILE :'+$ENDWHILE);
		$$=yy.GRAPHCANVAS.parsingContext._exitContainer()
	}
	| IF {
		parser.trace('IF :'+$IF);
		$$=_getGroupConditionalOrMakeNew(yy.GRAPHCANVAS, 'if', $IF)
	}
	| ELSEIF {
		parser.trace('ELSEIF vertexGroupListOrAttrs :'+$ELSEIF);
		$$=_getGroupConditionalOrMakeNew(yy.GRAPHCANVAS, 'elseif', $ELSEIF)
	}
	| ELSE {
		parser.trace('ELSE :'+$ELSE);
		$$=_getGroupConditionalOrMakeNew(yy.GRAPHCANVAS, 'else', $ELSE)
	}
	| ENDIF	 {
		parser.trace('ENDIF :'+$ENDIF);
		_getGroupConditionalOrMakeNew(yy.GRAPHCANVAS,'endif', $ENDIF)
	}
	/* A GROUP declaration: GROUP [NAME] [COLOR] [LABEL] */
	| GROUP GROUPNAME? colorOrVariable? LABEL? GROUP_DECLARATION_END {
		parser.trace('GROUP : name='+$2+", color="+$3+", label="+$4);
		$$=yy.GRAPHCANVAS.parsingContext._enterContainer(_getGroupOrMakeNew(yy.GRAPHCANVAS, undefined, $2).setColor($3).setLabel($4==undefined?undefined:$4.substring(1)))
	}
	| GROUP_END  {
		parser.trace('GROUP_END :'+$GROUP_END);
		$$=yy.GRAPHCANVAS.parsingContext._exitContainer()
	}
	| START NAME {
		parser.trace('START :'+$NAME);
		yy.GRAPHCANVAS.setStart($NAME)
	}
	| readEvents {
		parser.trace('readEvents3 :'+$readEvents)
	}
	;
%% 
