%start S

%%

S
	: contents EOF
		{
			debug("contents EOF");
			initObjects(yy);
			if ("actdiag" == yy.OUTPUT){
				actdiag(yy);
			}else if ("blockdiag" == yy.OUTPUT){
				blockdiag(yy);
			}else{
				digraph(yy);
			}
			return $1;
		}
	;

contents
	: content
		{$$ = $1;}
	| contents content
		{$$ =  $1 + $2;}
	;

/* process all NAME .* possibilities 
So when we end up here, we've got LHS x> and now we're doing RHS
1)#ff00ffHuiHai;dkkdkdkd
2)HuiHai;ffddfsdfsa
3)#ffffe2HuiHai
4)HuiHai

State:NAME(s) State:COLOR(#ff0000)

targetName State:EVENT(>) State:COLOR(#00ff00) State:NAME(c)

targetName State:COLOR(#0000ff2) State:LABEL(;connect
*/
targetName
	: targetName EVENT COLOR NAME LABEL
		{	//USED
			debug("targetName EVENT COLOR NAME LABEL"+" SS="+$$+",S0="+$0+",S1="+$1);
			//this is label the LINK, not the NODE
			var r=getNode(yy,$4);
			$$=getLink(yy,$1,r,$5.substring(1)).setColor($3).right;
		}
	| targetName EVENT COLOR NAME
		{
			//USED
			debug("targetName EVENT COLOR NAME"+" SS="+$$+",S0="+$0+",S1="+$1);
			$$=getLink(yy,$1,getNode(yy,$4)).setColor($3).right;
		}
	| targetName COLOR LABEL
		{
			//USED
			debug("targetName COLOR LABEL"+" SS="+$$+",S0="+$0+",S1="+$1);
			$$=$1.setColor($2).setLabel($3.substring(1));
		}
	| targetName EVENT NAME LABEL 
 		{
 			//USED
			debug("targetName EVENT NAME LABEL"+" SS="+$$+",S0="+$0+",S1="+$1);
			//this is LABEL THE LINK not the NODE...
			$$=getLink(yy,$1,getNode(yy,$3),$4.substring(1)).right;
		}
	| targetName EVENT NAME
		{
			debug("targetName EVENT NAME"+" SS="+$$+",S0="+$0+",S1="+$1);
			$$=getLink(yy,$1,getNode(yy,$3)).right;
		}
	| targetName LABEL
		{
			debug("targetName LABEL"+" SS="+$$+",S0="+$0+",S1="+$1);
			$$=$1.setLabel($2.substring(1));
		}
	| targetName LISTSEP NAME
		{
			debug("targetName LISTSEP NAME"+" SS="+$$+",S0="+$0+",S1="+$1+" S2="+$2+" S3="+$3);
			$$=getList(yy,$1,$3);
		}
	| NAME COLOR
		{
			debug("NAME COLOR"+" SS="+$$+",S0="+$0+",S1="+$1);
			$$=getNode(yy,$1).setColor($2);
		}
	| NAME
		{
			debug("NAME"+" SS="+$$+",S0="+$0+",S1="+$1);
			$$=getNode(yy,$1);
		}
	;
		
content
	: SHAPE NAME
		{{$$=getGraphRoot(yy).setCurrentShape($2);}}
	| LEFT_RIGHT
		{{$$=getGraphRoot(yy).setDirection($1);}}
	| TOP_DOWN
		{{$$=getGraphRoot(yy).setDirection($1);}}
	| COMMENT
		{{$$="/*"+$1.substring(2)+"*/\n";}}
	| GROUP COLOR LABEL
		{{$$=getGroup(yy).setColor($2).setLabel($3.substring(1));}}
	| GROUP LABEL
		{{$$=getGroup(yy).setLabel($2.substring(1));}}
	/*| GROUP NUMBER
		{{$$=getGroup(yy,$2);}}*/
	| GROUP_END
		{{$$=getGraphRoot(yy).setCurrentContainer(yy);}}
	| START NAME
		//{$$="  {rank = same;null}\n  {rank = same; "+$2+"}\n  null [shape=plaintext, label=\"\"];\n"+$2+"[shape=doublecircle];\nnull->"+$2+";\n";}
		{$$=getGraphRoot(yy).setStart($2);}
	| targetName
		{
		debug("targetName"+" SS="+$$+",S0="+$0+",S1="+$1);
		//$$=getNode(yy,$1);
		//$2($$);
		}
	;

%%
function debug(msg){
	if (true)
		console.log(msg);
} 
function getGraphRoot(yy){
	if (!yy.GRAPHROOT){
		debug("no graphroot,init");
		initObjects(yy);
	}
        return yy.GRAPHROOT;
}
function initObjects(yy){
	debug("Initialize "+yy);
	if (!yy.GRAPHROOT){
	debug("Initialize emptyroot "+yy);
	        yy.OBJECTS=new Array();
	        yy.LINKS=new Array();
        	yy.GRAPHROOT=new GraphRoot();
		yy.GRAPHROOT.setCurrentContainer(yy);
	}
}
//LHS=Node(z1)
function getList(yy,LHS,RHS){
  if (LHS instanceof Node){
	debug("getList("+LHS+","+RHS);
  	var x=new Array();
  	x.push(LHS);
  	x.push(getNode(yy,RHS));
  	return x;
  }
  debug("getList(["+LHS+"],"+RHS);
  //LHS not a node..
  LHS.push(getNode(yy,RHS));
  return LHS;
}
function getNode(yy,name){
	if (yy.OBJECTS==undefined) initObjects(yy);
        for(var i in yy.OBJECTS){
                if (yy.OBJECTS[i].getName()==name){
                        return yy.OBJECTS[i];
                }
		if (yy.OBJECTS[i] instanceof Group){
			var o=yy.OBJECTS[i];
		        for(var j in o.OBJECTS){
                		if (o.OBJECTS[j].getName()==name){
                		        return o.OBJECTS[j];
               			 }
			}
		}
        }
	var n=new Node(name,getGraphRoot(yy).getCurrentShape());
	return pushObject(yy,n);
}
function getGroup(yy){
	/*if (yy.OBJECTS==undefined) initObjects(yy);
        for(var i in yy.OBJECTS){
                if (yy.OBJECTS[i].getName()==name){
                        return yy.OBJECTS[i];
                }
        }*/
	debug("NEW GROUP");
	if (yy.GROUPIDS==undefined)yy.GROUPIDS=0;
	var n=new Group(yy.GROUPIDS++);
	pushObject(yy,n);
	getGraphRoot(yy).setCurrentContainer(n);
	return n;
}
function pushObject(yy,o){
        //yy.OBJECTS.push(o);
	getGraphRoot(yy).getCurrentContainer().OBJECTS.push(o);
	return o;
}
//Get a link such that l links to r, return RHS
function getLink(yy,l,r,label){
	if (l instanceof Array){
		debug("getLink called with LHS array");
		for(var i=0;i<l.length;i++){
			debug("Get link "+l[i]);
			getLink(yy,l[i],r,label);
		}
		return r;
	}
	if (!(l instanceof Node)){
		throw new Error("LHS not a Node("+l+")");
	}
	if (!(r instanceof Node)){
		throw new Error("RHS not a Node("+r+")");
	}
	var l=new Link(l,r);
	if (label!=undefined) l.setLabel(label);
	return addLink(yy,l);
}
function addLink(yy,l){
	if (l instanceof Array){
		debug("PUSH LINK ARRAY:"+l);
	}else{
		debug("PUSH LINK:"+l);
	}
        yy.LINKS.push(l);
	return l;
}
function containsObject(yy,o){
        for(var i in yy.OBJECTS){
                if (yy.OBJECTS[i]==o){
                        return true;
                }
        }
        return false;
}
function hasObjects(yy,o){
        return yy.OBJECTS.length!=0;
}
function peekObject(yy,o){
        return yy.OBJECTS[yy.OBJECTS.length-1];
}
function popObject(yy){
        return yy.OBJECTS.pop();
}
function setAttr(cl,attr,value){
        cl[attr]=value;
        return cl;
}
String.prototype.format = function() {
        var formatted = this;
        for (arg in arguments) {
            formatted = formatted.replace("{" + arg + "}", arguments[arg]);
        }
        return formatted;
};
/* return attribute like prefix="ATTRHERE" with padding at both sides or "" if 0 or undefined */
function getAttr(cl,attr){
        if (cl[attr]==undefined || cl[attr]==0)return "";
        return cl[attr];
}
function getAttrFmt(cl,attr,fmt){
	if (cl[attr]==undefined || cl[attr]==0)return "";
	return ' '+fmt.format(cl[attr])+' ';
}

function GraphObject(label){
	this.setName=function(value){return setAttr(this,'name',value);};
        this.getName = function() { return getAttr(this,'name');}
	this.setColor=function(value){return setAttr(this,'color',value);};
        this.getColor = function() { return getAttr(this,'color');}
	this.label=label;
	this.setLabel=function(value){return setAttr(this,'label',value.trim());};
        this.getLabel = function() { return getAttr(this,'label');}
	this.toString = function() {
		return "GraphObject";
    	};
}

Node.prototype=new GraphObject();
Node.prototype.constructor=Node;
function Node(name,shape){
	this.name=name;
	this.shape=shape;
	this.setShape=function(value){return setAttr(this,'shape',value);};
        this.getShape = function() { return getAttr(this,'shape');}
	this.toString = function() {
		return "Node("+this.getName()+")";
    	};
}
Group.prototype=new GraphObject();
Group.prototype.constructor=Group;
function Group(name){
	this.name=name;
	this.OBJECTS=new Array();
	this.toString = function() {
		return "Group";
    	};
}
GraphRoot.prototype=new GraphObject();
GraphRoot.prototype.constructor=GraphRoot;
function GraphRoot(){
	this.setCurrentShape=function(value){return setAttr(this,'shape',value);};
        this.getCurrentShape = function() { return getAttr(this,'shape');}
	this.setCurrentContainer=function(value){return setAttr(this,'container',value);};
        this.getCurrentContainer = function() { return getAttr(this,'container');}
	this.setDirection=function(value){return setAttr(this,'direction',value);};
        this.getDirection = function() { return getAttr(this,'direction');}
	this.setStart=function(value){return setAttr(this,'start',value);};
        this.getStart = function() { return getAttr(this,'start');}
	this.toString = function() {
		return "GraphRoot";
    	};
}
Link.prototype=new GraphObject();
Link.prototype.constructor=Link;
function Link(l,r){
	this.left=l;
	this.right=r;
	this.toString = function() {
		return "Link("+this.left.toString()+","+this.right.toString()+")";
    	};
}
function digraph(yy){
	console.log("digraph {");
	var r=getGraphRoot(yy);
	var s=r.getStart();
	if (s != undefined && s!=""){
		//    {$$="  {rank = same;null}\n  {rank = same; "+$2+"}\n  null [shape=plaintext, label=\"\"];\n"+$2+"[shape=doublecircle];\nnull->"+$2+";\n";}
		console.log("{rank = same;null}\n  {rank = same; "+s+"}\n  null [shape=plaintext, label=\"\"];\n"+s+"[shape=doublecircle];\nnull->"+s+";\n");
	}
	for(var i in yy.OBJECTS){
		var o=yy.OBJECTS[i];
		if (o instanceof Group){
			debug(JSON.stringify(o));
			console.log('subgraph cluster_'+o.getName()+' {');
			console.log(	getAttrFmt(o,'label','label="{0}";'));
			for(var j in o.OBJECTS){
				var z=o.OBJECTS[j];
				var s=	getAttrFmt(z,'color',',color="{0}"')+
					getShape(shapes.digraph,z.shape,',shape="{0}"')+
					/*getAttrFmt(z,'shape',',shape="{0}"')+*/
					getAttrFmt(z,'label',',label="{0}"');
				if (s.trim()!="")
					s="["+s.trim().substring(1)+"]";
				console.log(z.getName()+s+';');
			}
			console.log("}");
		}else if (o instanceof Node){
			var s=	getAttrFmt(o,'color',',fillcolor="{0}",style="filled"')+
				getShape(shapes.digraph,o.shape,',shape="{0}"')+
				/*getAttrFmt(o,'shape',',shape="{0}"')+*/
				getAttrFmt(o,'label',',label="{0}"');
			if (s.trim()!="")
				s="["+s.trim().substring(1)+"]";
			console.log(o.getName()+s+';');
		}else{
			var s=	getAttrFmt(o,'color',',color="{0}"')+
				getShape(shapes.digraph,o.shape,',shape="{0}"')+
				/*getAttrFmt(o,'shape',',shape="{0}"')+*/
				getAttrFmt(o,'label',',label="{0}"');
			if (s.trim()!="")
				s="["+s.trim().substring(1)+"]";
			console.log(o.getName()+s+';');
		}
	}
	for(var i in yy.LINKS){
		var l=yy.LINKS[i];
		var t=getAttrFmt(l,'label',',label="{0}"')+
		getAttrFmt(l,'color',',color="{0}"');
		if (t.trim()!="")
			t="["+t.trim().substring(1)+"]";
		console.log(l.left.getName()+"->"+l.right.getName()+t+";");
	}
	console.log("}");
}
//node parse.js state2.txt actdiag |actdiag -Tpng -o a.png - && open a.png
function actdiag(yy){
	console.log("{");
	var r=getGraphRoot(yy);
	var s=r.getStart();
	for(var i in yy.OBJECTS){
		var o=yy.OBJECTS[i];
		if (o instanceof Group){
			console.log('lane "'+o.getLabel()+'"{');
			for(var j in o.OBJECTS){
				var z=o.OBJECTS[j];
				var s=	getAttrFmt(z,'color',',color="{0}"')+
					getShape(shapes.actdiag,z.shape,',shape="{0}"')+
					getAttrFmt(z,'label',',label="{0}"');
				if (s.trim()!="")
					s="["+s.trim().substring(1)+"]";
				console.log(z.getName()+s+';');
			}
			console.log("}");
		}else{
			var s=	getAttrFmt(o,'color',',color="{0}"')+
				getShape(shapes.actdiag,o.shape,',shape="{0}"')+
				getAttrFmt(o,'label',',label="{0}"');
			if (s.trim()!="")
				s="["+s.trim().substring(1)+"]";
			console.log(o.getName()+s+';');
		}
	}
	for(var i in yy.LINKS){
		var l=yy.LINKS[i];
		console.log(l.left.getName()+" -> "+l.right.getName()+";");
	}
	console.log("}");
}
//http://blockdiag.com/en/blockdiag/examples.html#simple-diagram
//node parse.js state2.txt blockdiag |blockdiag -Tpng -o a.png - && open a.png
//available shapes
//box,square,roundedbox,dots
//circle,ellipse,diamond,minidiamond
//note,mail,cloud,actor
//flowchart.beginpoint,flowchart.endpoint
//flowchart.condition,flowchart.database,flowchart.terminator,flowchart.input
//flowchart.loopin,flowchart.loopout
function blockdiag(yy){
	console.log("{");
	var r=getGraphRoot(yy);
	var s=r.getStart();
	for(var i in yy.OBJECTS){
		var o=yy.OBJECTS[i];
		if (o instanceof Group){
			console.log('group "'+o.getLabel()+'"{');
			console.log(getAttrFmt(o,'color','color="{0}"'));
			console.log(getAttrFmt(o,'label','label="{0}"'));
			if (s.trim()!="")
				s="["+s.trim().substring(1)+"]";
			for(var j in o.OBJECTS){
				var z=o.OBJECTS[j];
				var s=	getAttrFmt(z,'color',',color="{0}"')+
					getShape(shapes.blockdiag,z.shape,',shape="{0}"')+
					getAttrFmt(z,'label',',label="{0}"');
				if (s.trim()!="")
					s="["+s.trim().substring(1)+"]";
				console.log(z.getName()+s+';');
			}
			console.log("}");
		}else{
			var s=	getAttrFmt(o,'color',',color="{0}"')+
				getShape(shapes.blockdiag,o.shape,',shape="{0}"')+
				getAttrFmt(o,'label',',label="{0}"');
			if (s.trim()!="")
				s="["+s.trim().substring(1)+"]";
			console.log(o.getName()+s+';');
		}
	}
	for(var i in yy.LINKS){
		var l=yy.LINKS[i];
		console.log(l.left.getName()+" -> "+l.right.getName()+";");
	}
	console.log("}");
}
function getShape(shapes,o,fmt){
	if (o==undefined || o==0)return "";
	if (o in shapes)
		return ' '+fmt.format(shapes[o])+' ';
	else
		return ' '+fmt.format(shapes.default)+' ';
}
var shapes={
blockdiag:{
	default:"box",
	record:"box",
	doublecircle:"endpoint",
	box:"box",rect:"box",rectangle:"box",
	square:"square",
	roundedbox:"roundedbox",
	dots:"dots",
	circle:"circle",
	ellipse:"ellipse",
	diamond:"diamond",
	minidiamond:"mdiamond",
	note:"note",
	mail:"mail",
	cloud:"cloud",
	actor:"actor",
	beginpoint:"flowchart.beginpoint",
	endpoint:"flowchart.endpoint",
	condition:"flowchart.condition",
	database:"flowchart.database",
	terminator:"flowchart.terminator",
	input:"flowchart.input",
	loopin:"flowchart.loopin",loop:"flowchart.loopin",loopstart:"flowchart.loopin",
	loopout:"flowchart.loopout",loopend:"flowchart.loopout"
	},
actdiag:{
	default:"box",
	record:"box",
	doublecircle:"endpoint",
	box:"box",rect:"box",rectangle:"box",
	square:"square",
	roundedbox:"roundedbox",
	dots:"dots",
	circle:"circle",
	ellipse:"ellipse",
	diamond:"diamond",
	minidiamond:"mdiamond",
	note:"note",
	mail:"mail",
	cloud:"cloud",
	actor:"actor",
	beginpoint:"flowchart.beginpoint",
	endpoint:"flowchart.endpoint",
	condition:"flowchart.condition",
	database:"flowchart.database",
	terminator:"flowchart.terminator",
	input:"flowchart.input",
	loopin:"flowchart.loopin",loop:"flowchart.loopin",loopstart:"flowchart.loopin",
	loopout:"flowchart.loopout",loopend:"flowchart.loopout"
	},
digraph:{
	default:"box",
	record:"record",
	doublecircle:"doublecircle",
	box:"box",rect:"box",rectangle:"box",
	square:"square",
	roundedbox:"box",
	dots:"point",
	circle:"circle",
	ellipse:"ellipse",
	diamond:"diamond",
	minidiamond:"Mdiamond",
	note:"note",
	mail:"tab",
	cloud:"tripleoctagon",
	actor:"cds",
	beginpoint:"circle",
	endpoint:"doublecircle",
	condition:"Mdiamond",
	database:"Mcircle",
	terminator:"ellipse",
	input:"parallelogram",
	loopin:"house",loop:"house",loopstart:"house",
	loopout:"invhouse",loopend:"invhouse"
}
};
