/*https://github.com/zaach/jison/wiki/Deviations-From-Flex-Bison*/
%start S
%ebnf
%%

S
	: contents EOF
		{
			debug("contents EOF");
			var generator=getGraphRoot(yy).getGenerator();
			if (yy.OUTPUT)
			  generator=yy.OUTPUT
			if ("actdiag" == generator){
				actdiag(yy);
			}else if ("blockdiag" == generator){
				blockdiag(yy);
			}else if ("nwdiag" == generator){
				nwdiag(yy);
			}else if ("seqdiag" == generator){
				seqdiag(yy);
			}else if ("mscgen" == generator){
				mscgen(yy);
			}else{
				//rankdir available ONLY IN dot
				digraph(yy);
			}
			return $1;
		}
	;

contents
	: content 			-> $content
	| contents content 	-> $contents + $content
	;

getColorOrVariable
	: VARIABLE 	-> processVariable(yy,$VARIABLE) /*one can use named $VARIABLE or positional $1 args, like former, but latter seem more ...readable*/
	| COLOR		-> $COLOR
	;
	
getShapeOrVariable
	: VARIABLE {
			$$=processVariable(yy,$1).trim();
			if (["actor","beginpoint","box","circle","cloud","condition","database","default","diamond","dots","doublecircle","ellipse","endpoint","input","loopin","loopout","mail","minidiamond","minisquare","note","record","roundedbox","square","terminator","loop","loopend","loopstart","rect","rectangle"].indexOf($$)==-1){
				throw new Error("Must use declared shape");
			}
	}
	| SHAPES -> $SHAPES
	;
readNodeAttrs
	: STYLES SHAPES getColorOrVariable -> getNode(yy,$NAME,$STYLES).setColor($getColorOrVariable).setShape($SHAPES)
	| STYLES NAME getColorOrVariable -> getNode(yy,$NAME,$STYLES).setColor($getColorOrVariable)
	| STYLES NAME IMAGE 			-> getNode(yy,$NAME,$STYLES).setImage($IMAGE)
	| STYLES SHAPES NAME 				-> getNode(yy,$NAME,$STYLES).setShape($SHAPES)
	| STYLES NAME 				-> getNode(yy,$NAME,$STYLES)
	| SHAPES NAME getColorOrVariable 	-> getNode(yy,$NAME).setColor($getColorOrVariable).setShape($SHAPES)
	| NAME getColorOrVariable 	-> getNode(yy,$NAME).setColor($getColorOrVariable)
	| NAME IMAGE 				-> getNode(yy,$NAME).setImage($IMAGE)
	| SHAPES NAME 						-> getNode(yy,$NAME).setShape($SHAPES)
	| NAME 						-> getNode(yy,$NAME)
	;

/*
NOT BEST...return Node or Group, but some commands allow only Node and some just Group...
But it gets thing done..for now!
TODO: Fix it

This means getNode MUST be able to return a Group as well! If name matches!!
*/
readNodeOrGroup
    /* readNodeOrGroup cumulates an array of nodes, RHS is latest node */
	: readNodeOrGroup LISTSEP readNodeAttrs -> getList(yy,$readNodeOrGroup,$readNodeAttrs)
	| readNodeOrGroup LISTSEP INLINE_STRING readNodeAttrs -> getList(yy,$readNodeOrGroup,$readNodeAttrs,$INLINE_STRING)
	| readNodeAttrs -> $readNodeAttrs
	;
targetName
	: targetName EVENT getColorOrVariable INLINE_STRING readNodeOrGroup -> getLink(yy,$EVENT,$targetName,$readNodeOrGroup,$INLINE_STRING,$getColorOrVariable).right
	| targetName EVENT getColorOrVariable readNodeOrGroup LABEL -> getLink(yy,$EVENT,$targetName,$readNodeOrGroup,$LABEL.substring(1),$getColorOrVariable).right
	| targetName EVENT getColorOrVariable readNodeOrGroup -> getLink(yy,$2,$1,$4,undefined,$3).right
	| targetName EVENT readNodeOrGroup LABEL
		{
			debug("targetName EVENT readNodeOrGroup LABEL"+" SS="+$$+",S0="+$0+",S1="+$1+",S2="+$2+",S3="+$3);
			if ($3 instanceof Group){
				$$=getLink(yy,$2,$1,getGroup(yy,$3),$4.substring(1)).right;
			}else{
				$$=getLink(yy,$2,$1,getNode(yy,$3),$4.substring(1)).right;
			}
		}
	| targetName EVENT INLINE_STRING readNodeOrGroup
		{
			if ($readNodeOrGroup instanceof Group){
				$$=getLink(yy,$EVENT,$targetName,getGroup(yy,$readNodeOrGroup),$INLINE_STRING).right;
			}else{
				$$=getLink(yy,$EVENT,$targetName,getNode(yy,$readNodeOrGroup),$INLINE_STRING).right;
			}
		}
	| targetName EVENT readNodeOrGroup
		{
			if ($readNodeOrGroup instanceof Group){
				$$=getLink(yy,$EVENT,$targetName,getGroup(yy,$readNodeOrGroup)).right;
			}else{
				$$=getLink(yy,$EVENT,$targetName,getNode(yy,$readNodeOrGroup)).right;
			}
		}
	| readNodeOrGroup LABEL -> $$.setLabel($2.substring(1))
	| readNodeOrGroup {
			debug("readNodeOrGroup"+" SS="+$$+",S0="+$0+",S1="+$1);
		}
	;
	/*
	A GROUP declaration
	GROUP [NAME] [COLOR] [LABEL]
	*/
groupTarget
	: NAME getColorOrVariable LABEL -> enterContainer(yy,getGroup(yy).setName($1).setColor($2).setLabel($3.substring(1)))
	| getColorOrVariable LABEL	-> enterContainer(yy,getGroup(yy).setColor($1).setLabel($2.substring(1)))
	| LABEL 					-> enterContainer(yy,getGroup(yy).setLabel($1.substring(1)))
	| NAME LABEL				-> enterContainer(yy,getGroup(yy).setName($1).setLabel($2.substring(1)))
	| NAME getColorOrVariable	-> enterContainer(yy,getGroup(yy).setName($1).setColor($2))
	| NAME						-> enterContainer(yy,getGroup(yy).setName($1))
	;
content
	: VARIABLE -> processVariable(yy,$1)
	| SHAPE getShapeOrVariable
		{
			debug("SHAPE getShapeOrVariablleee ");
			if ($2=="default") $2=undefined;
			$$=getGraphRoot(yy).setCurrentShape($2);
		}
	| EQUAL readNodeOrGroup
		{
			if ($2 instanceof Node){
				getCurrentContainer(yy).setEqual(new Array($2));
			}else{
				getCurrentContainer(yy).setEqual($2);
			}
		}
	| SHAPE NAME {throw new Error("Expecting one of the shapes, got ("+$2+")");}
	| LANDSCAPE 	-> getGraphRoot(yy).setDirection("landscape")
	| GENERATOR NAME -> getGraphRoot(yy).setGenerator($NAME)
	| VISUALIZER NAME -> getGraphRoot(yy).setVisualizer($NAME)
	| PORTRAIT 	-> getGraphRoot(yy).setDirection("portrait")
	| COMMENT 	-> "/*"+$COMMENT.substring(2)+"*/\n"
	| NODE_COLOR getColorOrVariable{
		if ($2=="default") $2=undefined;
		$$=getCurrentContainer(yy).setDefault('nodecolor',$2);}
	| NODETEXT_COLOR getColorOrVariable{
		if ($2=="default") $2=undefined;
		$$=getCurrentContainer(yy).setDefault('nodetextcolor',$2);}
	| LINK_COLOR getColorOrVariable{
		if ($2=="default") $2=undefined;
		$$=getCurrentContainer(yy).setDefault('linkcolor',$2);}
	| LINKTEXT_COLOR getColorOrVariable{
		if ($2=="default") $2=undefined;
		$$=getCurrentContainer(yy).setDefault('linktextcolor',$2);}
	| GROUP_COLOR getColorOrVariable{
		if ($2=="default") $2=undefined;
		$$=getCurrentContainer(yy).setDefault('groupcolor',$2);}
	| GROUP groupTarget {}
	| GROUP_END 	-> exitContainer(yy)
	| START NAME 	-> getGraphRoot(yy).setStart($NAME)
	| targetName {
		//debug("targetName"+" SS="+$$+",S0="+$0+",S1="+$1);
		//$$=getNode(yy,$1);
		//$2($$);
		}
	;

%% 
