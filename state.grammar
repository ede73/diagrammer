%start S

%%

S
	: contents EOF
		{
			console.log("digraph {");
			console.log($1); 
			console.log("}");
			return $1;
		}
	;

contents
	: content
		{$$ = $1;}
	| contents content
		{$$ =  $1 + $2;}
	;

/* process all STATE EVENT .* possibilities */
targetState
	: COLOR STATE LABEL
		{$$=$2+"[color=\""+$1+"\",label=\""+$3.substring(1)+"\"];\n";}
	| STATE LABEL
		{$$=$1+"[label=\""+$2.substring(1)+"\"];\n";}
	| COLOR STATE
		{$$=$2+"[color=\""+$1+"\"];\n";}
	| STATE
		{$$=$1+";\n";}
	;
		
/* process all STATE .* possibilities*/
colorLabel
	: COLOR LABEL
		{$$="[color=\""+$1+"\",label=\""+$2.substring(1)+"\"];\n"}
	| LABEL
		{$$="[label=\""+$1.substring(1)+"\"];\n"}
	;

content
	: SHAPE STATE
		{{$$="  node [ shape = "+$2+"];\n";}}
	| LEFT_RIGHT
		{{$$="  rankdir=LR;\n";}}
	| TOP_DOWN
		{{$$="  rankdir=TD;\n";}}
	| COMMENT
		{{$$="/*"+$1.substring(2)+"*/\n";}}
	| GROUP NUMBER LABEL
		{{$$="  subgraph cluster_"+$2+"{\n  label=\""+$3.substring(1)+"\"\n";}}
	| GROUP NUMBER
		{{$$="  subgraph cluster_"+$2+"{\n";}}
	| GROUP_END
		{{$$="  };\n";}}
	| START STATE
		{$$="  {rank = same;null}\n  {rank = same; "+$2+"}\n  null [shape=plaintext, label=\"\"];\n"+$2+"[shape=doublecircle];\nnull->"+$2+";\n";}
	| STATE EVENT targetState
		{$$="  "+$1+"->"+$3;}
	| STATE colorLabel
		{$$=$1+$2;}
	| STATE
		{$$=$1+";\n";}
	;

%%
function getGraphRoot(yy){
        return yy.GRAPHROOT;
}
function initObjects(yy){
        yy.OBJECTS=new Array();
        yy.GRAPHROOT=new GraphRoot();
}
function pushObject(yy,o){
        yy.OBJECTS.push(o);
}
function containsObject(yy,o){
        for(var i in yy.OBJECTS){
                if (yy.OBJECTS[i]==o){
                        return true;
                }
        }
        return false;
}
function hasObjects(yy,o){
        return yy.OBJECTS.length!=0;
}
function peekObject(yy,o){
        return yy.OBJECTS[yy.OBJECTS.length-1];
}
function popObject(yy){
        return yy.OBJECTS.pop();
}
function setAttr(cl,attr,value){
        cl[attr]=value;
        return cl;
}
String.prototype.format = function() {
        var formatted = this;
        for (arg in arguments) {
            formatted = formatted.replace("{" + arg + "}", arguments[arg]);
        }
        return formatted;
};
/* return attribute like prefix="ATTRHERE" with padding at both sides or "" if 0 or undefined */
function getAttr(cl,attr,prefix){
        if (cl[attr]==undefined || cl[attr]==0)return "";
        return ' '+prefix.format(cl[attr])+' ';
        //return ' '+prefix+'="'+cl[attr]+'" ';
}

function GraphObject(text){
	this.setId=function(value){return setAttr(this,'id',value);};
        this.getId = function() { return getAttr(this,'id','id="{0}"');}
	this.text=text;
	this.toString = function() {
		return "";
    	};
}

Node.prototype=new GraphObject();
Node.prototype.constructor=Node;
function Node(){
	this.shape="rectangle";
	this.setId=function(value){return setAttr(this,'id',value);};
        this.getId = function() { return getAttr(this,'id','id="{0}"');}
	this.toString = function() {
		return "";
    	};
}
GraphRoot.prototype=new GraphObject();
GraphRoot.prototype.constructor=GraphRoot;
function GraphRoot(){
	this.setId=function(value){return setAttr(this,'id',value);};
        this.getId = function() { return getAttr(this,'id','id="{0}"');}
	this.toString = function() {
		return "";
    	};
}
Edge.prototype=new GraphObject();
Edge.prototype.constructor=Edge;
function Edge(){
	this.setId=function(value){return setAttr(this,'id',value);};
        this.getId = function() { return getAttr(this,'id','id="{0}"');}
	this.toString = function() {
		return "";
    	};
}
