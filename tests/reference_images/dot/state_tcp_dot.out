digraph {
    compound=true;
    rankdir=TD;
    closed[ fillcolor="#ff0000", label="CLOSED", shape="box", style="filled" ];
    closed_end[ fillcolor="#ff0000", label="closed\nBack to start", shape="box", style="filled" ];
    listen[ fillcolor="#ffff00", label="LISTEN", shape="box", style="filled" ];
    syn_received[ fillcolor="#888888", label="SYN\nRECEIVED", shape="box", style="filled" ];
    syn_sent[ fillcolor="#888888", label="SYN\nSENT", shape="box", style="filled" ];
    established[ fillcolor="#00ff00", label="ESTABLISHED\ndata xchange occurs", shape="box", style="filled" ];
    subgraph cluster_PassiveClose {
        label="Passive CLOSE";
        style=filled;
        color="#afeeee";
        close_wait[ fillcolor="#ffff00", label="CLOSE WAIT", shape="box", style="filled" ];
        last_ack[ fillcolor="#ffff00", label="LAST ACK", shape="box", style="filled" ];
    }//end of PassiveClose undefined
    subgraph cluster_ActiveClose {
        label="Active CLOSE";
        style=filled;
        color="#afeeee";
        fin_wait1[ fillcolor="#ffff00", label="FIN WAIT 1", shape="box", style="filled" ];
        closing[ fillcolor="#ffff00", label="CLOSING", shape="box", style="filled" ];
        fin_wait2[ fillcolor="#ffff00", label="FIN WAIT 2", shape="box", style="filled" ];
        time_wait[ fillcolor="#ffff00", label="TIME WAIT", shape="box", style="filled" ];
    }//end of ActiveClose undefined
    //links start
    syn_sent->closed[ label="CLOSE/-", style="dotted" ];
    syn_sent->syn_received[ label="SYN/SYN+ACK\n(simultaneous open)", style="dotted" ];
    listen->syn_sent[ label="SEND/SYN", style="dotted" ];
    listen->closed[ label="CLOSE/-", style="dotted" ];
    syn_received->listen[ label="RST/-", style="dotted" ];
    syn_received->fin_wait1[ label="CLOSE/FIN", style="dotted" ];
    fin_wait1->closing[ label="FIN/ACK", style="dotted" ];
    fin_wait1->time_wait[ label="FIN+ACK/ACK", style="dotted" ];
    closing->time_wait[ style="dotted" ];
    closed->syn_sent[ color="#ff0000", label="CONNECT/SYN(1/3 of 3w/hs)" ];
    syn_sent->established[ color="#ff0000", label="SYN+ACK/ACK(3/3 of 3w/hs)" ];
    established->fin_wait1[ color="#ff0000", label="CLOSE/FIN" ];
    fin_wait1->fin_wait2[ color="#ff0000", label="ACK/-" ];
    fin_wait2->time_wait[ color="#ff0000", label="FIN/ACK" ];
    time_wait->closed_end[ color="#ff0000", label="Timeout" ];
    closed->listen[ color="#0000ff", label="LISTEN/-" ];
    listen->syn_received[ color="#0000ff", label="SYN/SYN+ACK(2/3 of 3w/hs)" ];
    syn_received->established[ color="#0000ff", label="ACK/-" ];
    established->close_wait[ color="#0000ff", label="FIN/ACK" ];
    close_wait->last_ack[ color="#0000ff", label="CLOSE/FIN" ];
    last_ack->closed_end[ color="#0000ff" ];
}
